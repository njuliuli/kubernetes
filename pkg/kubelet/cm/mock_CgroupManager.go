// Code generated by mockery v1.0.0. DO NOT EDIT.

package cm

import mock "github.com/stretchr/testify/mock"

// MockCgroupManager is an autogenerated mock type for the CgroupManager type
type MockCgroupManager struct {
	mock.Mock
}

// CgroupName provides a mock function with given fields: name
func (_m *MockCgroupManager) CgroupName(name string) CgroupName {
	ret := _m.Called(name)

	var r0 CgroupName
	if rf, ok := ret.Get(0).(func(string) CgroupName); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CgroupName)
		}
	}

	return r0
}

// Create provides a mock function with given fields: _a0
func (_m *MockCgroupManager) Create(_a0 *CgroupConfig) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*CgroupConfig) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Destroy provides a mock function with given fields: _a0
func (_m *MockCgroupManager) Destroy(_a0 *CgroupConfig) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*CgroupConfig) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: name
func (_m *MockCgroupManager) Exists(name CgroupName) bool {
	ret := _m.Called(name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(CgroupName) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetResourceStats provides a mock function with given fields: name
func (_m *MockCgroupManager) GetResourceStats(name CgroupName) (*ResourceStats, error) {
	ret := _m.Called(name)

	var r0 *ResourceStats
	if rf, ok := ret.Get(0).(func(CgroupName) *ResourceStats); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ResourceStats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(CgroupName) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields: name
func (_m *MockCgroupManager) Name(name CgroupName) string {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(CgroupName) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Pids provides a mock function with given fields: name
func (_m *MockCgroupManager) Pids(name CgroupName) []int {
	ret := _m.Called(name)

	var r0 []int
	if rf, ok := ret.Get(0).(func(CgroupName) []int); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	return r0
}

// ReduceCPULimits provides a mock function with given fields: cgroupName
func (_m *MockCgroupManager) ReduceCPULimits(cgroupName CgroupName) error {
	ret := _m.Called(cgroupName)

	var r0 error
	if rf, ok := ret.Get(0).(func(CgroupName) error); ok {
		r0 = rf(cgroupName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *MockCgroupManager) Update(_a0 *CgroupConfig) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*CgroupConfig) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
