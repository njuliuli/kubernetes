// Code generated by mockery v1.0.0. DO NOT EDIT.

package cm

import (
	mock "github.com/stretchr/testify/mock"
	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/api/core/v1"
)

// MockPodContainerManager is an autogenerated mock type for the PodContainerManager type
type MockPodContainerManager struct {
	mock.Mock
}

// Destroy provides a mock function with given fields: name
func (_m *MockPodContainerManager) Destroy(name CgroupName) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(CgroupName) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureExists provides a mock function with given fields: _a0
func (_m *MockPodContainerManager) EnsureExists(_a0 *v1.Pod) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Pod) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: _a0
func (_m *MockPodContainerManager) Exists(_a0 *v1.Pod) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*v1.Pod) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAllPodsFromCgroups provides a mock function with given fields:
func (_m *MockPodContainerManager) GetAllPodsFromCgroups() (map[types.UID]CgroupName, error) {
	ret := _m.Called()

	var r0 map[types.UID]CgroupName
	if rf, ok := ret.Get(0).(func() map[types.UID]CgroupName); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[types.UID]CgroupName)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPodContainerName provides a mock function with given fields: _a0
func (_m *MockPodContainerManager) GetPodContainerName(_a0 *v1.Pod) (CgroupName, string) {
	ret := _m.Called(_a0)

	var r0 CgroupName
	if rf, ok := ret.Get(0).(func(*v1.Pod) CgroupName); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CgroupName)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(*v1.Pod) string); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// IsPodCgroup provides a mock function with given fields: cgroupfs
func (_m *MockPodContainerManager) IsPodCgroup(cgroupfs string) (bool, types.UID) {
	ret := _m.Called(cgroupfs)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(cgroupfs)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 types.UID
	if rf, ok := ret.Get(1).(func(string) types.UID); ok {
		r1 = rf(cgroupfs)
	} else {
		r1 = ret.Get(1).(types.UID)
	}

	return r0, r1
}

// ReduceCPULimits provides a mock function with given fields: name
func (_m *MockPodContainerManager) ReduceCPULimits(name CgroupName) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(CgroupName) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
